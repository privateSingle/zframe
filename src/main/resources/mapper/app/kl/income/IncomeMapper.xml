<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="platform.app.kl.income.dao.IncomeDao">

    <resultMap type="platform.app.kl.income.entity.Income" id="incomeMap">
        <result property="id" column="id"/>
        <result property="incomeName" column="income_name"/>
        <result property="incomeType" column="income_type"/>
        <result property="incomePrice" column="income_price"/>
        <result property="incomeDate" column="income_date"/>
        <result property="remark" column="remark"/>
        <result property="addTime" column="add_time"/>
        <result property="userId" column="user_id"/>
    </resultMap>
	<!-- 搜索数据区域 -->
	<sql id="where_clause">
		<where>
			1=1
							<if test="id != null and id != ''"> and t.id = #{id} </if>
				<if test="idVague != null and idVague != ''"> and t.id like concat('%',#{idVague},'%') </if>
							<if test="incomeName != null and incomeName != ''"> and t.income_name = #{incomeName} </if>
				<if test="incomeNameVague != null and incomeNameVague != ''"> and t.income_name like concat('%',#{incomeNameVague},'%') </if>
							<if test="incomeType != null and incomeType != ''"> and t.income_type = #{incomeType} </if>
				<if test="incomeTypeVague != null and incomeTypeVague != ''"> and t.income_type like concat('%',#{incomeTypeVague},'%') </if>
							<if test="incomePrice != null and incomePrice != ''"> and t.income_price = #{incomePrice} </if>
				<if test="incomePriceVague != null and incomePriceVague != ''"> and t.income_price like concat('%',#{incomePriceVague},'%') </if>
							<if test="incomeDate != null and incomeDate != ''"> and t.income_date = #{incomeDate} </if>
				<if test="incomeDateVague != null and incomeDateVague != ''"> and t.income_date like concat('%',#{incomeDateVague},'%') </if>
							<if test="remark != null and remark != ''"> and t.remark = #{remark} </if>
				<if test="remarkVague != null and remarkVague != ''"> and t.remark like concat('%',#{remarkVague},'%') </if>
							<if test="addTime != null and addTime != ''"> and t.add_time = #{addTime} </if>
				<if test="addTimeVague != null and addTimeVague != ''"> and t.add_time like concat('%',#{addTimeVague},'%') </if>
							<if test="userId != null and userId != ''"> and t.user_id = #{userId} </if>
				<if test="userIdVague != null and userIdVague != ''"> and t.user_id like concat('%',#{userIdVague},'%') </if>
					</where>
	</sql>

	<select id="get" resultType="platform.app.kl.income.entity.Income">
		select * from t_income where id = #{value}
	</select>

	<select id="getList" resultType="platform.app.kl.income.entity.Income">
		select * from t_income t <include refid="where_clause" />
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="getCount" resultType="int">
		select count(*) from t_income t  <include refid="where_clause" />
	</select>


	 
	<insert id="save" parameterType="platform.app.kl.income.entity.Income" useGeneratedKeys="true" keyProperty="id">
		insert into t_income
		(
			`income_name`, 
			`income_type`, 
			`income_price`, 
			`income_date`, 
			`remark`, 
			`add_time`, 
			`user_id`
		)
		values
		(
			#{incomeName}, 
			#{incomeType}, 
			#{incomePrice}, 
			#{incomeDate}, 
			#{remark}, 
			#{addTime}, 
			#{userId}
		)
	</insert>
	 
	<update id="update" parameterType="platform.app.kl.income.entity.Income">
		update t_income 
		<set>
			<if test="incomeName != null">`income_name` = #{incomeName}, </if>
			<if test="incomeType != null">`income_type` = #{incomeType}, </if>
			<if test="incomePrice != null">`income_price` = #{incomePrice}, </if>
			<if test="incomeDate != null">`income_date` = #{incomeDate}, </if>
			<if test="remark != null">`remark` = #{remark}, </if>
			<if test="addTime != null">`add_time` = #{addTime}, </if>
			<if test="userId != null">`user_id` = #{userId}</if>
		</set>
		where id = #{id}
	</update>
	
	<delete id="delete">
		delete from t_income where id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from t_income where id in 
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

</mapper>